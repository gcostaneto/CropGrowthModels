#'########################################################################################
# MODULE (2): BIOMASS PRODUCTION                                     
#'########################################################################################

require(chron)

#'------------------------------------------------------------------------------------------
# Canopy growth model (for leaf or kc)
#'------------------------------------------------------------------------------------------

leaf.curve = function(.endKc, # vector containing end kc values for init, midle and end
         .lenghPhase, # vector contanign lenght of each phenological stage
         .namePhase=NULL,
         .dae,
         .digits=3,
         .stage=NULL
){
  #' model assumptions:
  #' based on FAO-56 recommendations to create kc curves using interpolation
  #' 1. Input parameters check
  #' if lenghPhase is missing, the function will crash
  if(is.null(.lenghPhase)){stop("missing lenghPhase vector")}
  .lenghPhase = c(0,.lenghPhase)
  #' if dae is missing, the function will crash
  if(is.null(.dae)){}
  if(is.null(.namePhase)){.namePhase=c("initial","crop development","midle season","late season")}
  #' if .stage is null, .stage is computed using stage.by.dae function
  if(is.null(.stage)){
    .stage = stage.by.dae(.dae = .dae,.breaks = .lenghPhase,.names = .namePhase)}
  
 
  #' 2. Computing canopy curve
  Kc =c(.endKc[1],.endKc[1],.endKc[2],.endKc[2],.endKc[3],.endKc[3])
  Lp = .lenghPhase
  df = data.frame(kc=1,stage = .stage)
  
  suppressWarnings(for(i in 1:length(.namePhase)){
    
    if(i == 1){df$kc[df$stage %in% .namePhase[1]] = Kc[1]}
    if(i == 3){df$kc[df$stage %in% .namePhase[3]] = Kc[3]}
    if(i == 2 | i == 4){
      .rate =(Kc[i+1]-Kc[i])/(Lp[i+1]-Lp[i])
      df$kc[df$stage %in% .namePhase[i]] = round(seq(from = Kc[i], 
                                                     to = Kc[i+1],by=.rate),.digits)}
  })
  df$stage = as.character(df$stage)
  df$stage[is.na(df$stage)] = "No Crop"
  return(data.frame(dae=.dae, df))}

#'------------------------------------------------------------------------------------------
# aparent PAR
#'------------------------------------------------------------------------------------------
aPAR = function(Srad,fraction=.5,K=.5,IAF){
  PAR = Srad*fraction
  return(PAR*(1-exp(-K*IAF)))}

#'------------------------------------------------------------------------------------------
# temperature reduction factor
#'------------------------------------------------------------------------------------------
FTar = function(Tbase1,Tbase2,Tmed,Topt1,Topt2){
  n = length(Tmed)
  FTAR = rep(1,n)
  for(i in 1:n){
    if(Tmed[i] < Topt1){FTAR[i] = (Tmed[i]-Tbase1)/(Topt1-Tbase1)}
    if(Tmed[i] > Topt2){FTAR[i] = (Tmed-Topt2)/(Tbase2-Topt2)}
  }
  return(FTAR)
}

#'------------------------------------------------------------------------------------------
## biomass production module
#'------------------------------------------------------------------------------------------
Y.prod = function(aPAR,RUE=3.84, IC=.33,
              FTar=NULL, U=.13,
              sdate,CropCycle,
              Population=1){
  
  require(lubridate)
  require(chron)

  
  ## State variables
  if(is.Date(sdate)){sdate = yday(sdate)}
  
  YP=rep(0,CropCycle)
  DAE = 1:CropCycle
  
  if(is.null(FTar)){FTar = rep(1,CropCycle)}
  
  YP[1] = 0
  Uc = 1/(1-U)
  
  for(day in 1:CropCycle){
    YP[day] = aPAR[day]*RUE*FTar[day]*Uc*Population*10
  }
  Yield = sum(YP)*IC
  return(list(dryMatter=data.frame(TDM=cumsum(YP),dae=1:CropCycle),Yield=Yield,
              res_env=data.frame(aPAR=aPAR,FTar=FTar)))
  }
